{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundery.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundery","state","hasError","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","INCREASE_COUNT","connect","searchField","searchRobots","requestRobots","isPending","error","count","changeCount","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","catch","onIncreaseCount","useEffect","filteredRobots","filter","robot","toLowerCase","includes","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","initialStateCount","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sMAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACE,6BAAKF,IACL,4BAAIC,WCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKJC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,EAAMK,Y,uCCFAC,EAAb,kDAEI,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CAAEC,UAAU,GAHV,EAFvB,qDAQI,WACIC,KAAKC,SAAS,CAAEF,UAAU,MATlC,oBAYI,WACI,OAAIC,KAAKF,MAAMC,SACJ,gEAGJC,KAAKT,MAAMK,aAjB1B,GAAmCM,aCHtBC,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBAExBC,EAAiB,iB,OCqFfC,eAjFS,SAAAV,GACtB,MAAO,CACLW,YAAaX,EAAMY,aAAaD,YAChC7B,OAAQkB,EAAMa,cAAc/B,OAC5BgC,UAAWd,EAAMa,cAAcC,UAC/BC,MAAOf,EAAMa,cAAcE,MAC3BC,MAAOhB,EAAMiB,YAAYD,UAIF,SAACE,GAC1B,MAAO,CACLC,eAAgB,SAACC,GAAD,OAAWF,GCnBAG,EDmBwBD,EAAME,OAAOC,MCnB3B,CACrClC,KAAMgB,EACNmB,QAASH,KAFiB,IAACA,GDoB3BI,gBAAiB,kBAAMP,GCfQ,SAACA,GAChCA,EAAS,CAAE7B,KAAMiB,IAEjBoB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7C,GAAM,OAAIoC,EAAS,CAAE7B,KAAMkB,EAAwBiB,QAAS1C,OACjEgD,OAAM,SAAAf,GAAK,OAAIG,EAAS,CAAE7B,KAAMmB,EAAuBgB,QAAST,WDUrEgB,gBAAiB,kBAAMb,ECPS,CAChC7B,KAAMoB,QDyEKC,EA/DH,SAACjB,GAEXuC,qBAAU,WACRvC,EAAMgC,oBACL,IAEH,IAAQX,EAA2ErB,EAA3EqB,UAAWK,EAAgE1B,EAAhE0B,eAAgBR,EAAgDlB,EAAhDkB,YAAa7B,EAAmCW,EAAnCX,OAAQkC,EAA2BvB,EAA3BuB,MAAOe,EAAoBtC,EAApBsC,gBAEzDE,EAAiBnD,EAAOoD,QAAO,SAAAC,GACnC,OAAOA,EAAM5D,KAAK6D,cAAcC,SAAzB,OAAkC1B,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAayB,kBAGxD,OAAOtB,EACL,yCAEE,sBAAKpC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,yBAAQ4D,QAASP,EAAjB,qEAA8Cf,KAC9C,cAAC,EAAD,CAAW5B,aAAc+B,IACzB,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUrC,OAAQmD,cEvCxBM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpD,QACf+C,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB3B,OAAM,SAAAf,GACLyC,QAAQzC,MAAM,4CAA6CA,M,wBCpE3D2C,EAAqB,CACvB/C,YAAa,IAGXgD,EAAqB,CACvB7E,OAAQ,GACRgC,WAAW,EACXC,MAAO,MAGL6C,EAAoB,CACtB5C,MAAO,G,gBCDL6C,EAAcC,YAAgB,CAAElD,aDIV,WAA8C,IAA7CZ,EAA4C,uDAApC0D,EAAoBK,EAAgB,uDAAP,GAC9D,OAAQA,EAAO1E,OACNgB,EACM,2BAAKL,GAAZ,IAAmBW,YAAaoD,EAAOvC,UAEhCxB,GCTiCa,cDavB,WAA8C,IAA7Cb,EAA4C,uDAApC2D,EAAoBI,EAAgB,uDAAP,GAC/D,OAAQA,EAAO1E,MACX,KAAKiB,EACD,OAAO,2BAAKN,GAAZ,IAAmBc,WAAW,IAClC,KAAKP,EACD,OAAO,2BAAKP,GAAZ,IAAmBlB,OAAQiF,EAAOvC,QAASV,WAAW,IAC1D,KAAKN,EAED,OADAgD,QAAQC,IAAIM,GACL,2BAAK/D,GAAZ,IAAmBe,MAAOgD,EAAOvC,QAASV,WAAW,IACzD,QACI,OAAOd,ICvBgDiB,YD2BxC,WAA6C,IAA5CjB,EAA2C,uDAAnC4D,EAAmBG,EAAgB,uDAAP,GAC5D,OAAQA,EAAO1E,OACNoB,EACM,2BAAKT,GAAZ,IAAmBgB,MAAOhB,EAAMgB,MAAQ,IAEjChB,KC/BbgE,EAASC,yBACTC,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBL,IAExEM,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJM,SAASC,eAAe,SFAb,WACb,GAA6C,kBAAmB1B,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,eAAwBlC,OAAOC,UAC3CkC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM6B,eAAN,sBAEPpC,EAwCV,SAAiCO,GAE/BpB,MAAMoB,GACHnB,MAAK,SAAAC,GAGkB,MAApBA,EAASkD,SACuD,IAAhElD,EAASmD,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ClC,UAAUC,cAAckC,MAAMvD,MAAK,SAAAuB,GACjCA,EAAaiC,aAAaxD,MAAK,WAC7Bc,OAAOC,SAAS0C,eAKpBvC,EAAgBC,MAGnBhB,OAAM,WACL0B,QAAQC,IACN,oEA5DA4B,CAAwBvC,GAGxBD,EAAgBC,OElBxBwC,K","file":"static/js/main.683977d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import { Component } from 'react';\r\n\r\n\r\nexport class ErrorBoundery extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { hasError: false }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>שגיאה</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHNAGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nexport const INCREASE_COUNT = 'INCREASE_COUNT';","import React, { Component, useEffect, useState } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport { ErrorBoundery } from './ErrorBoundery';\r\nimport { increaseCount, requestRobots, setSearchField } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    count: state.changeCount.count\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n    onIncreaseCount: () => dispatch(increaseCount())\r\n  }\r\n}\r\n\r\nconst App = (props) => {\r\n\r\n  useEffect(() => {\r\n    props.onRequestRobots();\r\n  }, []);\r\n\r\n  const { isPending, onSearchChange, searchField, robots, count, onIncreaseCount } = props;\r\n\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField?.toLowerCase());\r\n  });\r\n\r\n  return isPending ?\r\n    <h1>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <button onClick={onIncreaseCount}>מספר נוכחי {count}</button>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundery>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundery>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\n// class App extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//       .then(response => response.json())\r\n//       .then(users => this.props.onSearchChange(users));\r\n//   }\r\n\r\n//   render() {\r\n//     const filteredRobots = robots.filter(robot => {\r\n//       return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n//     });\r\n\r\n//     return !robots.length ?\r\n//       <h1>Loading</h1> :\r\n//       (\r\n//         <div className='tc'>\r\n//           <h1 className='f1'>RoboFriends</h1>\r\n//           <button onClick={() => setCount(count + 1)}>Click Me {count}</button>\r\n//           <SearchBox searchChange={onSearchChange} />\r\n//           <Scroll>\r\n//             <ErrorBoundery>\r\n//               <CardList robots={filteredRobots} />\r\n//             </ErrorBoundery>\r\n//           </Scroll>\r\n//         </div>\r\n//       );\r\n//   }\r\n// }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { INCREASE_COUNT, CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\";\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(robots => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}\r\n\r\nexport const increaseCount = () => ({\r\n    type: INCREASE_COUNT,\r\n})","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { INCREASE_COUNT, CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error: null\r\n};\r\n\r\nconst initialStateCount = {\r\n    count: 0\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            console.log(action)\r\n            return { ...state, error: action.payload, isPending: false }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const changeCount = (state = initialStateCount, action = {}) => {\r\n    switch (action.type) {\r\n        case INCREASE_COUNT:\r\n            return { ...state, count: state.count + 1 };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { searchRobots, requestRobots, changeCount } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots, changeCount})\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}